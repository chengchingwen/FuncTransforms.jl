var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FuncTransforms","category":"page"},{"location":"#FuncTransforms","page":"Home","title":"FuncTransforms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FuncTransforms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FuncTransforms]","category":"page"},{"location":"#FuncTransforms.FA","page":"Home","title":"FuncTransforms.FA","text":"FA(name::Symbol, slotnumber::Int; gen = true)\n\nA \"Function Argument\" from the transformed function with old slotnumber renamed to name.\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.FuncArgs","page":"Home","title":"FuncTransforms.FuncArgs","text":"abstract type FuncArgs\n\nAn abstract type for representing function arguments in a function transformation context for constructing FuncTransform.\n\nSubtypes of FuncArgs include:\n\nNA: Represents a new argument to be added to the function.\nFA: Represents an existing function argument, possibly with modifications.\nVA: Specifically denotes a Vararg.\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.FuncInfo","page":"Home","title":"FuncTransforms.FuncInfo","text":"FuncInfo(sig, world; method_tables::Union{Nothing, MethodTable} = nothing)\n\nLookup to Core.CodeInfo of a function signature sig with specific world age and convert the Core.CodeInfo into FuncInfo.\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.FuncTransform","page":"Home","title":"FuncTransforms.FuncTransform","text":"FuncTransform(sig, world, fargs::Union{Vector{FuncArgs}, Nothing} = nothing;\n    caller::Union{MethodInstance, Nothing} = nothing,\n    method_tables::Union{Nothing, MethodTable} = nothing)\n\nConstructs a FuncTransform object used to perform transformations on function sig of world age world.  fargs is used to specific the new function arguments of the new function. If fargs is nothing, the origin  arguments would be used. If caller is provided, it also set the backedge accordingly. The transformations  should be applied to FuncTransform(...).fi::FuncInfo and use toCodeInfo to get the result.\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.NA","page":"Home","title":"FuncTransforms.NA","text":"NA(name::Symbol; gen = true)\n\nA \"New Argument\" with name. Used to introduce new position argument.\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.VA","page":"Home","title":"FuncTransforms.VA","text":"VA(name::Symbol, drop::Int; gen = true)\n\nA \"VarArg\". With VA, we can assign the values in this argument to the arguments of the transformed function.  drop would drop the given number of arguments of the transformed function (var\"#self#\" also counts).\n\n\n\n\n\n","category":"type"},{"location":"#FuncTransforms.FuncInfoIter","page":"Home","title":"FuncTransforms.FuncInfoIter","text":"FuncInfoIter(fi::FuncInfo, start = firstssavalue(fi))\n\nCreates an iterator over the code statements of a function's code block starting from a given SSA value.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addarg!","page":"Home","title":"FuncTransforms.addarg!","text":"addarg!(fi::FuncInfo, name::Symbol)\n\nAdds a new argument to FuncInfo with the specified name. Returns the new SlotNumber.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addparg!","page":"Home","title":"FuncTransforms.addparg!","text":"addparg!(fi::FuncInfo, name::Symbol [, index::Integer])\n\nAdds a new argument to FuncInfo with the specified name, and insert it to the position arguments.  If index is not provided, insert it to the last non-vararg position. Returns the new SlotNumber.  Equivalent to addarg! + insertparg!.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addstmt!","page":"Home","title":"FuncTransforms.addstmt!","text":"addstmt!(fi::FuncInfo, stmt)\n\nAdds a new statement to FuncInfo but not insert into the code block. Returns the new SSAValue.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addstmtafter!","page":"Home","title":"FuncTransforms.addstmtafter!","text":"addstmtafter!(fi::FuncInfo, id::Union{SSAValue, Int}, stmt)\n\nInserts a new statement after the statement identified by id in FuncInfo.  Returns the new SSAValue for the inserted statement. Equivalent to addstmt! + insertafter!.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addstmtbefore!","page":"Home","title":"FuncTransforms.addstmtbefore!","text":"addstmtbefore!(fi::FuncInfo, id::Union{SSAValue, Int}, stmt)\n\nInserts a new statement before the statement identified by id in FuncInfo.  Returns the new SSAValue for the inserted statement. Equivalent to addstmt! + insertbefore!.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addva!","page":"Home","title":"FuncTransforms.addva!","text":"addva!(fi::FuncInfo, name::Symbol)\n\nAdds a new argument to FuncInfo and sets it as the vararg. Returns the SlotNumber of the new argument.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.addvar!","page":"Home","title":"FuncTransforms.addvar!","text":"addvar!(fi::FuncInfo, name::Symbol)\n\nAdds a new variable to FuncInfo with the specified name. Returns the new SlotNumber.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.arg2var!","page":"Home","title":"FuncTransforms.arg2var!","text":"arg2var!(fi::FuncInfo, id::Union{SlotNumber, Int})\n\nMoves an argument identified by id from the argument slots to variable slots in FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.assignva!","page":"Home","title":"FuncTransforms.assignva!","text":"assignva!(fi::FuncInfo, varid::Union{SlotNumber, Int}, vaid::Union{SlotNumber, Int}, index::Integer)\n\nAdd the code at the beginning of code block that: given the new vararg (vaid),  extract the element at index and assign to the old argumentvarid`.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.deletearg!","page":"Home","title":"FuncTransforms.deletearg!","text":"deletearg!(fi::FuncInfo, id::Union{SlotNumber, Int})\n\nDeletes an argument from FuncInfo identified by id.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.deleteparg!","page":"Home","title":"FuncTransforms.deleteparg!","text":"deleteparg!(fi::FuncInfo, id::Union{SlotNumber, Int})\n\nRemoves the positional argument from FuncInfo identified by id.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.deletevar!","page":"Home","title":"FuncTransforms.deletevar!","text":"deletevar!(fi::FuncInfo, id::Union{SlotNumber, Int})\n\nDeletes a variable from FuncInfo identified by id.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.firstssavalue","page":"Home","title":"FuncTransforms.firstssavalue","text":"firstssavalue(fi::FuncInfo)\n\nReturns the first SSA value in the code block of FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.getparg","page":"Home","title":"FuncTransforms.getparg","text":"getparg(fi::FuncInfo, index::Integer)\n\nRetrieves the SlotNumber of the positional argument at the given index in FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.getva","page":"Home","title":"FuncTransforms.getva","text":"getva(fi::FuncInfo)\n\nReturns the SlotNumber of the vararg in FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.insertafter!","page":"Home","title":"FuncTransforms.insertafter!","text":"insertafter!(fi::FuncInfo, id::Union{SSAValue, Int}, stmtid::Union{SSAValue, Int})\n\nInserts the statement identified by stmtid after the statement identified by id in FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.insertbefore!","page":"Home","title":"FuncTransforms.insertbefore!","text":"insertbefore!(fi::FuncInfo, id::Union{SSAValue, Int}, stmtid::Union{SSAValue, Int})\n\nInserts the statement identified by stmtid before the statement identified by id in FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.insertparg!","page":"Home","title":"FuncTransforms.insertparg!","text":"insertparg!(fi::FuncInfo, id::Union{SlotNumber, Int}, index::Integer)\n\nInserts an existing argument identified by id into the positional arguments of FuncInfo at the specified index.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.lastssavalue","page":"Home","title":"FuncTransforms.lastssavalue","text":"lastssavalue(fi::FuncInfo)\n\nReturns the last SSA value in the code block of FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.nextssavalue","page":"Home","title":"FuncTransforms.nextssavalue","text":"nextssavalue(fi::FuncInfo, i::Union{SSAValue, Int})\n\nReturns the next SSA value of the given SSA value i in the code block of FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.prevssavalue","page":"Home","title":"FuncTransforms.prevssavalue","text":"prevssavalue(fi::FuncInfo, i::Union{SSAValue, Int})\n\nReturns the previous SSA value of the given SSA Value i in the code block of FuncInfo.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.renamearg!","page":"Home","title":"FuncTransforms.renamearg!","text":"renamearg!(fi::FuncInfo, slot, name::Symbol)\n\nRenames an argument identified by slot in FuncInfo to the new name provided.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.renamevar!","page":"Home","title":"FuncTransforms.renamevar!","text":"renamevar!(fi::FuncInfo, slot, name::Symbol)\n\nRenames a variable identified by slot in FuncInfo to the new name provided.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.repackva!","page":"Home","title":"FuncTransforms.repackva!","text":"repackva!(fi::FuncInfo, varid::Union{SlotNumber, Int}, vaid::Union{SlotNumber, Int}, indices::Vector{Integer})\n\nAdd the code at the beginning of code block that: given the new vararg (vaid),  extract the element at indices, pack them as a tuple and assign to the old vararg (varid).\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.replacestmt!","page":"Home","title":"FuncTransforms.replacestmt!","text":"replacestmt!(fi::FuncInfo, id::Union{SSAValue, Int}, stmt)\n\nReplaces the statement at the given SSA Value id in FuncInfo's code block with a new statement.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.setva!","page":"Home","title":"FuncTransforms.setva!","text":"setva!(fi::FuncInfo, id::Union{SlotNumber, Int})\n\nSets the vararg of FuncInfo to the specified id.\n\n\n\n\n\n","category":"function"},{"location":"#FuncTransforms.toCodeInfo","page":"Home","title":"FuncTransforms.toCodeInfo","text":"toCodeInfo(fi::Union{FuncInfo, FuncTransform})\n\nConverts a FuncInfo or FuncTransform into a Core.CodeInfo.\n\n\n\n\n\n","category":"function"}]
}
